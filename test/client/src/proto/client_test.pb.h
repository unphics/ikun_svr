// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_5ftest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5ftest_2eproto;
namespace client_test {
class protocol_header;
class protocol_headerDefaultTypeInternal;
extern protocol_headerDefaultTypeInternal _protocol_header_default_instance_;
class req;
class reqDefaultTypeInternal;
extern reqDefaultTypeInternal _req_default_instance_;
class rsp;
class rspDefaultTypeInternal;
extern rspDefaultTypeInternal _rsp_default_instance_;
}  // namespace client_test
PROTOBUF_NAMESPACE_OPEN
template<> ::client_test::protocol_header* Arena::CreateMaybeMessage<::client_test::protocol_header>(Arena*);
template<> ::client_test::req* Arena::CreateMaybeMessage<::client_test::req>(Arena*);
template<> ::client_test::rsp* Arena::CreateMaybeMessage<::client_test::rsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace client_test {

// ===================================================================

class protocol_header PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client_test.protocol_header) */ {
 public:
  inline protocol_header() : protocol_header(nullptr) {};
  virtual ~protocol_header();

  protocol_header(const protocol_header& from);
  protocol_header(protocol_header&& from) noexcept
    : protocol_header() {
    *this = ::std::move(from);
  }

  inline protocol_header& operator=(const protocol_header& from) {
    CopyFrom(from);
    return *this;
  }
  inline protocol_header& operator=(protocol_header&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const protocol_header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const protocol_header* internal_default_instance() {
    return reinterpret_cast<const protocol_header*>(
               &_protocol_header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(protocol_header& a, protocol_header& b) {
    a.Swap(&b);
  }
  inline void Swap(protocol_header* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(protocol_header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline protocol_header* New() const final {
    return CreateMaybeMessage<protocol_header>(nullptr);
  }

  protocol_header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<protocol_header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const protocol_header& from);
  void MergeFrom(const protocol_header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(protocol_header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client_test.protocol_header";
  }
  protected:
  explicit protocol_header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5ftest_2eproto);
    return ::descriptor_table_client_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolNameFieldNumber = 1,
  };
  // string protocol_name = 1;
  void clear_protocol_name();
  const std::string& protocol_name() const;
  void set_protocol_name(const std::string& value);
  void set_protocol_name(std::string&& value);
  void set_protocol_name(const char* value);
  void set_protocol_name(const char* value, size_t size);
  std::string* mutable_protocol_name();
  std::string* release_protocol_name();
  void set_allocated_protocol_name(std::string* protocol_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_protocol_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_protocol_name(
      std::string* protocol_name);
  private:
  const std::string& _internal_protocol_name() const;
  void _internal_set_protocol_name(const std::string& value);
  std::string* _internal_mutable_protocol_name();
  public:

  // @@protoc_insertion_point(class_scope:client_test.protocol_header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5ftest_2eproto;
};
// -------------------------------------------------------------------

class req PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client_test.req) */ {
 public:
  inline req() : req(nullptr) {};
  virtual ~req();

  req(const req& from);
  req(req&& from) noexcept
    : req() {
    *this = ::std::move(from);
  }

  inline req& operator=(const req& from) {
    CopyFrom(from);
    return *this;
  }
  inline req& operator=(req&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const req* internal_default_instance() {
    return reinterpret_cast<const req*>(
               &_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(req& a, req& b) {
    a.Swap(&b);
  }
  inline void Swap(req* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline req* New() const final {
    return CreateMaybeMessage<req>(nullptr);
  }

  req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const req& from);
  void MergeFrom(const req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client_test.req";
  }
  protected:
  explicit req(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5ftest_2eproto);
    return ::descriptor_table_client_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .client_test.protocol_header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::client_test::protocol_header& header() const;
  ::client_test::protocol_header* release_header();
  ::client_test::protocol_header* mutable_header();
  void set_allocated_header(::client_test::protocol_header* header);
  private:
  const ::client_test::protocol_header& _internal_header() const;
  ::client_test::protocol_header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::client_test::protocol_header* header);
  ::client_test::protocol_header* unsafe_arena_release_header();

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:client_test.req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::client_test::protocol_header* header_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5ftest_2eproto;
};
// -------------------------------------------------------------------

class rsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client_test.rsp) */ {
 public:
  inline rsp() : rsp(nullptr) {};
  virtual ~rsp();

  rsp(const rsp& from);
  rsp(rsp&& from) noexcept
    : rsp() {
    *this = ::std::move(from);
  }

  inline rsp& operator=(const rsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline rsp& operator=(rsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const rsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rsp* internal_default_instance() {
    return reinterpret_cast<const rsp*>(
               &_rsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(rsp& a, rsp& b) {
    a.Swap(&b);
  }
  inline void Swap(rsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(rsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline rsp* New() const final {
    return CreateMaybeMessage<rsp>(nullptr);
  }

  rsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<rsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const rsp& from);
  void MergeFrom(const rsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client_test.rsp";
  }
  protected:
  explicit rsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5ftest_2eproto);
    return ::descriptor_table_client_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kDescFieldNumber = 3,
    kHeaderFieldNumber = 1,
  };
  // string content = 2;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_content();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_content(
      std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string desc = 3;
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_desc();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_desc(
      std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // .client_test.protocol_header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::client_test::protocol_header& header() const;
  ::client_test::protocol_header* release_header();
  ::client_test::protocol_header* mutable_header();
  void set_allocated_header(::client_test::protocol_header* header);
  private:
  const ::client_test::protocol_header& _internal_header() const;
  ::client_test::protocol_header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::client_test::protocol_header* header);
  ::client_test::protocol_header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:client_test.rsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::client_test::protocol_header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// protocol_header

// string protocol_name = 1;
inline void protocol_header::clear_protocol_name() {
  protocol_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& protocol_header::protocol_name() const {
  // @@protoc_insertion_point(field_get:client_test.protocol_header.protocol_name)
  return _internal_protocol_name();
}
inline void protocol_header::set_protocol_name(const std::string& value) {
  _internal_set_protocol_name(value);
  // @@protoc_insertion_point(field_set:client_test.protocol_header.protocol_name)
}
inline std::string* protocol_header::mutable_protocol_name() {
  // @@protoc_insertion_point(field_mutable:client_test.protocol_header.protocol_name)
  return _internal_mutable_protocol_name();
}
inline const std::string& protocol_header::_internal_protocol_name() const {
  return protocol_name_.Get();
}
inline void protocol_header::_internal_set_protocol_name(const std::string& value) {
  
  protocol_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void protocol_header::set_protocol_name(std::string&& value) {
  
  protocol_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:client_test.protocol_header.protocol_name)
}
inline void protocol_header::set_protocol_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocol_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:client_test.protocol_header.protocol_name)
}
inline void protocol_header::set_protocol_name(const char* value,
    size_t size) {
  
  protocol_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:client_test.protocol_header.protocol_name)
}
inline std::string* protocol_header::_internal_mutable_protocol_name() {
  
  return protocol_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* protocol_header::release_protocol_name() {
  // @@protoc_insertion_point(field_release:client_test.protocol_header.protocol_name)
  return protocol_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void protocol_header::set_allocated_protocol_name(std::string* protocol_name) {
  if (protocol_name != nullptr) {
    
  } else {
    
  }
  protocol_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:client_test.protocol_header.protocol_name)
}
inline std::string* protocol_header::unsafe_arena_release_protocol_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:client_test.protocol_header.protocol_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return protocol_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void protocol_header::unsafe_arena_set_allocated_protocol_name(
    std::string* protocol_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (protocol_name != nullptr) {
    
  } else {
    
  }
  protocol_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      protocol_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client_test.protocol_header.protocol_name)
}

// -------------------------------------------------------------------

// req

// .client_test.protocol_header header = 1;
inline bool req::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool req::has_header() const {
  return _internal_has_header();
}
inline void req::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::client_test::protocol_header& req::_internal_header() const {
  const ::client_test::protocol_header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::client_test::protocol_header*>(
      &::client_test::_protocol_header_default_instance_);
}
inline const ::client_test::protocol_header& req::header() const {
  // @@protoc_insertion_point(field_get:client_test.req.header)
  return _internal_header();
}
inline void req::unsafe_arena_set_allocated_header(
    ::client_test::protocol_header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client_test.req.header)
}
inline ::client_test::protocol_header* req::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::client_test::protocol_header* req::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:client_test.req.header)
  
  ::client_test::protocol_header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::client_test::protocol_header* req::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::client_test::protocol_header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::client_test::protocol_header* req::mutable_header() {
  // @@protoc_insertion_point(field_mutable:client_test.req.header)
  return _internal_mutable_header();
}
inline void req::set_allocated_header(::client_test::protocol_header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:client_test.req.header)
}

// int32 id = 2;
inline void req::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 req::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 req::id() const {
  // @@protoc_insertion_point(field_get:client_test.req.id)
  return _internal_id();
}
inline void req::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void req::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:client_test.req.id)
}

// string name = 3;
inline void req::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& req::name() const {
  // @@protoc_insertion_point(field_get:client_test.req.name)
  return _internal_name();
}
inline void req::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:client_test.req.name)
}
inline std::string* req::mutable_name() {
  // @@protoc_insertion_point(field_mutable:client_test.req.name)
  return _internal_mutable_name();
}
inline const std::string& req::_internal_name() const {
  return name_.Get();
}
inline void req::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void req::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:client_test.req.name)
}
inline void req::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:client_test.req.name)
}
inline void req::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:client_test.req.name)
}
inline std::string* req::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* req::release_name() {
  // @@protoc_insertion_point(field_release:client_test.req.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void req::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:client_test.req.name)
}
inline std::string* req::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:client_test.req.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void req::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client_test.req.name)
}

// -------------------------------------------------------------------

// rsp

// .client_test.protocol_header header = 1;
inline bool rsp::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool rsp::has_header() const {
  return _internal_has_header();
}
inline void rsp::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::client_test::protocol_header& rsp::_internal_header() const {
  const ::client_test::protocol_header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::client_test::protocol_header*>(
      &::client_test::_protocol_header_default_instance_);
}
inline const ::client_test::protocol_header& rsp::header() const {
  // @@protoc_insertion_point(field_get:client_test.rsp.header)
  return _internal_header();
}
inline void rsp::unsafe_arena_set_allocated_header(
    ::client_test::protocol_header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client_test.rsp.header)
}
inline ::client_test::protocol_header* rsp::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::client_test::protocol_header* rsp::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:client_test.rsp.header)
  
  ::client_test::protocol_header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::client_test::protocol_header* rsp::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::client_test::protocol_header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::client_test::protocol_header* rsp::mutable_header() {
  // @@protoc_insertion_point(field_mutable:client_test.rsp.header)
  return _internal_mutable_header();
}
inline void rsp::set_allocated_header(::client_test::protocol_header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:client_test.rsp.header)
}

// string content = 2;
inline void rsp::clear_content() {
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& rsp::content() const {
  // @@protoc_insertion_point(field_get:client_test.rsp.content)
  return _internal_content();
}
inline void rsp::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:client_test.rsp.content)
}
inline std::string* rsp::mutable_content() {
  // @@protoc_insertion_point(field_mutable:client_test.rsp.content)
  return _internal_mutable_content();
}
inline const std::string& rsp::_internal_content() const {
  return content_.Get();
}
inline void rsp::_internal_set_content(const std::string& value) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void rsp::set_content(std::string&& value) {
  
  content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:client_test.rsp.content)
}
inline void rsp::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:client_test.rsp.content)
}
inline void rsp::set_content(const char* value,
    size_t size) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:client_test.rsp.content)
}
inline std::string* rsp::_internal_mutable_content() {
  
  return content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* rsp::release_content() {
  // @@protoc_insertion_point(field_release:client_test.rsp.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void rsp::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:client_test.rsp.content)
}
inline std::string* rsp::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:client_test.rsp.content)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return content_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void rsp::unsafe_arena_set_allocated_content(
    std::string* content) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (content != nullptr) {
    
  } else {
    
  }
  content_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      content, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client_test.rsp.content)
}

// string desc = 3;
inline void rsp::clear_desc() {
  desc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& rsp::desc() const {
  // @@protoc_insertion_point(field_get:client_test.rsp.desc)
  return _internal_desc();
}
inline void rsp::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:client_test.rsp.desc)
}
inline std::string* rsp::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:client_test.rsp.desc)
  return _internal_mutable_desc();
}
inline const std::string& rsp::_internal_desc() const {
  return desc_.Get();
}
inline void rsp::_internal_set_desc(const std::string& value) {
  
  desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void rsp::set_desc(std::string&& value) {
  
  desc_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:client_test.rsp.desc)
}
inline void rsp::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:client_test.rsp.desc)
}
inline void rsp::set_desc(const char* value,
    size_t size) {
  
  desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:client_test.rsp.desc)
}
inline std::string* rsp::_internal_mutable_desc() {
  
  return desc_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* rsp::release_desc() {
  // @@protoc_insertion_point(field_release:client_test.rsp.desc)
  return desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void rsp::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:client_test.rsp.desc)
}
inline std::string* rsp::unsafe_arena_release_desc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:client_test.rsp.desc)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return desc_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void rsp::unsafe_arena_set_allocated_desc(
    std::string* desc) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      desc, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client_test.rsp.desc)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace client_test

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_5ftest_2eproto
